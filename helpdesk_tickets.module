<?php
/**
 * @file
 * helpdesk_tickets.module
 */

/**
 * Implementation of hook_node_info().
 * Define module-provided node types.
 */
function helpdesk_tickets_node_info() {
    return array(
        'helpdesk_ticket' => array(
            'name' => t('Helpdesk ticket'),
            'base' => 'helpdesk_ticket',
            'description' => t('A <em>helpdesk ticket</em>.')
        )
    );
}

/**
 * Implementation of hook_load().
 * Act on nodes being loaded from the database.
 * Node-type specific.
 */
function helpdesk_ticket_load($nodes) {
    $query = db_select('helpdesk_ticket', 't')
        ->fields('t', array('nid', 'priority', 'state', 'cid', 'problem', 'specialist', 'notes'))
        ->condition('nid', array_keys($nodes), 'IN');

    $result = $query->execute();

    foreach ($result as $record) {
        $nodes[$record->nid]->priority = $record->priority;
        $nodes[$record->nid]->state = $record->state;
        $nodes[$record->nid]->caller = $record->cid;
        $nodes[$record->nid]->problem = $record->problem;
        $nodes[$record->nid]->specialist = $record->specialist;
        $nodes[$record->nid]->notes = $record->notes;
    }
}

/**
 * Implementation of hook_form().
 * Display a node editing form.
 * Node-type specific.
 */
function helpdesk_ticket_form($node, &$form_state) {
    // Get the default implementation of hook_form()
    $form = array();
    
    $form['title'] = array(
        '#type' => 'textfield',
        '#title' => t('Reason for call'),
        '#description' => t('The issue that caused the person to call in.'),
        '#required' => TRUE,
        '#default_value' => $node->title
    );

    $priorities = _get_full_priority_list();

    $form['priority'] = array(
        '#type' => 'select',
        '#title' => t('Priority'),
        '#options' => $priorities,
        '#description' => t('Select how urgent this issue is.'),
        '#required' => TRUE,
        '#default_value' => isset($node->priority) ? $node->priority : 2
    );

    $states = _get_full_state_list();
    $open_key = array_search('open', $states);

    $form['state'] = array(
        '#type' => 'select',
        '#title' => t('State'),
        '#options' => isset($node->state) ? $states : array($open_key => $states[$open_key]),
        '#description' => t('Select what state this issue is in.'),
        '#required' => TRUE,
        '#default_value' => isset($node->state) ? $node->state : 1
    );

    $form['caller_container'] = array(
        '#type' => 'container'
    );

    $callers = _get_full_caller_list();

    $form['caller_container']['caller'] = array(
        '#type' => 'select',
        '#title' => t('Caller'),
        '#options' => $callers,
        '#description' => t('Select the name of the person who called in with this issue.'),
        '#required' => TRUE
    );

    $form['caller_container']['new_caller_link'] = array(
        '#type' => 'markup',
        '#markup' => l(t('Add a new caller'), 'admin/helpdesk_tickets/client/add')
    );

    if (isset($node->caller))
    {
        $form['caller_container']['caller']['#default_value'] = $node->caller;
    }

    $problem_types = _get_full_problem_type_list();

    $form['problem_container'] = array(
        '#type' => 'container'
    );

    $form['problem_container']['problem'] = array(
        '#type' => 'select',
        '#title' => t('Type of problem'),
        '#options' => $problem_types,
        '#description' => t('Select what the caller is having an issue with.'),
        '#required' => TRUE
    );

    if (isset($node->problem))
    {
        $form['problem_container']['problem']['#default_value'] = $node->problem;
    }

    $form['problem_container']['new_problem_link'] = array(
        '#type' => 'markup',
        '#markup' => l(t('Add a new problem type'), 'admin/helpdesk_tickets/problem_type/add')
    );

    $specialists = _get_full_specialists_list();

    $form['specialist'] = array(
        '#type' => 'select',
        '#title' => t('Specialist'),
        '#options' => $specialists,
        '#description' => t('Select a specialist to be assigned to this issue.'),
        '#required' => FALSE,
        '#empty_option' => t('Unassigned')
    );

    if (isset($node->specialist))
    {
        $form['specialist']['#default_value'] = $node->specialist;
    }

    $form['hardware'] = array(
        '#type' => 'fieldset',
        '#title' => t('Hardware'),
        '#collapsible' => TRUE
    );
    
    $form['hardware']['hardware_name'] = array(
        '#type' => 'textfield',
        '#title' => t('Name'),
        '#size' => 32
    );

    $form['hardware']['hardware_serial_no'] = array(
        '#type' => 'textfield',
        '#title' => t('Serial number'),
        '#size' => 64
    );

    $form['hardware']['add_hardware_button'] = array(
        '#type' => 'button',
        '#value' => t('Add hardware')
    );

    $form['software'] = array(
        '#type' => 'fieldset',
        '#title' => t('Software'),
        '#collapsible' => TRUE
    );
    
    $form['software']['software_name'] = array(
        '#type' => 'textfield',
        '#title' => t('Name'),
        '#size' => 32
    );

    $form['software']['software_serial_no'] = array(
        '#type' => 'textfield',
        '#title' => t('Serial number'),
        '#size' => 64
    );

    $form['software']['add_software_button'] = array(
        '#type' => 'button',
        '#value' => t('Add software')
    );

    $form['notes'] = array(
        '#type' => 'textarea',
        '#title' => t('Notes'),
        '#description' => t('Any addtional notes for this ticket.'),
        '#required' => FALSE
    );

    if (isset($node->notes))
    {
        $form['notes']['#default_value'] = $node->notes;
    }

    return $form;
}

/**
 * Implementation of hook_view().
 * Display a node.
 * Node-type specific.
 */
function helpdesk_ticket_view($node, $view_node, $langcode = NULL) {
    $priority_text = t(ucwords(_get_priority_name($node->priority)));

    $node->content['priority'] = array(
        '#type' => 'item',
        '#title' => t('Priority'),
        '#markup' => $priority_text
    );

    $state_text = t(ucwords(_get_state_name($node->state)));

    $node->content['state'] = array(
        '#type' => 'item',
        '#title' => t('State'),
        '#markup' => $state_text
    );

    $caller_text = t(_get_caller_name($node->caller));

    $node->content['caller'] = array(
        '#type' => 'item',
        '#title' => t('Caller'),
        '#markup' => $caller_text
    );

    $problem_type_text = t(_get_problem_type_name($node->problem));

    $node->content['problem'] = array(
        '#type' => 'item',
        '#title' => t('Type of problem'),
        '#markup' => $problem_type_text
    );

    $specialist_text = t('None');

    if ($node->specialist !== NULL)
    {
        $specialist_text = t(_get_user_name($node->specialist));
    }

    $node->content['specialist'] = array(
        '#type' => 'item',
        '#title' => t('Assigned specialist'),
        '#markup' => $specialist_text
    );

    if ($node->notes !== '')
    {
        $node->content['notes'] = array(
            '#type' => 'item',
            '#title' => t('Notes'),
            '#markup' => $node->notes
        );
    }

    return $node;
}

/**
 * Implementation of hook_insert().
 * Respond to creation of a new node.
 * Node-type specific.
 */
function helpdesk_ticket_insert($node) {
    _helpdesk_ticket_merge($node);
}

/**
 * Implementation of hook_update().
 * Respond to updates to a node.
 * Node-type specific.
 */
function helpdesk_ticket_update($node) {
    _helpdesk_ticket_merge($node);
}

/**
 * Helper function for inserting or updating a node.
 */
function _helpdesk_ticket_merge($node) {
    if ($node->specialist === '')
    {
        $node->specialist = NULL;
    }

    // Add or update the ticket
    db_merge('helpdesk_ticket')
        ->key(array('nid' => $node->nid))
        ->fields(array(
            'nid' => $node->nid,
            'priority' => $node->priority,
            'state' => $node->state,
            'cid' => $node->caller,
            'problem' => $node->problem,
            'specialist' => $node->specialist,
            'notes' => $node->notes
        ))
        ->execute();
}

/**
 * Implementation of hook_delete().
 * Respond to node deletion.
 * Node-type specific.
 */
function helpdesk_ticket_delete($node) {
    db_delete('helpdesk_ticket')
        ->condition('nid', $node->nid)
        ->execute();
}

/**
 * Implementation of hook_menu().
 * Define menu items and page callbacks.
 */
function helpdesk_tickets_menu() {
    $items = array(
        'ticket_list' => array(
            'title' => 'Helpdesk Tickets Overview',
            'type' => MENU_NORMAL_ITEM,
            'page callback' => 'helpdesk_tickets_list_page',
            'access callback' => TRUE
        ),
        'hardware_list' => array(
            'title' => 'Hardware Overview',
            'type' => MENU_NORMAL_ITEM,
            'page callback' => 'helpdesk_hardware_submissions',
            'access callback' => TRUE
        ),
        'software_list' => array(
            'title' => 'Software Overview',
            'type' => MENU_NORMAL_ITEM,
            'page callback' => 'helpdesk_software_submissions',
            'access callback' => TRUE
        ),
        'admin/helpdesk_tickets' => array(
            'title' => 'Helpdesk Ticketing System',
            'description' => 'Configure the helpdesk ticketing system.',
            'position' => 'right',
            'weight' => 5,
            'page callback' => 'helpdesk_tickets_admin_menu_block_page',
            'access arguments' => array('administer helpdesk_tickets'),
            'file' => 'helpdesk_tickets.admin.inc',
        ),
        'admin/helpdesk_tickets/client' => array(
            'title' => 'Clients',
            'type' => MENU_LOCAL_TASK,
            'access arguments' => array('administer helpdesk_tickets'),
        ),
        'admin/helpdesk_tickets/client/add' => array(
            'title' => 'Add Clients',
            'type' => MENU_LOCAL_TASK,
            'page callback' => 'drupal_get_form',
            'page arguments' => array('helpdesk_client_form'),
            'access arguments' => array('administer helpdesk_tickets'),
        ),
        'admin/helpdesk_tickets/client/view' => array(
            'title' => 'Helpdesk Client List',
            'type' => MENU_LOCAL_TASK,
            'page callback' => 'helpdesk_client_submissions',
            'access arguments' => array('administer helpdesk_tickets'),
        ),
        'admin/helpdesk_tickets/hardware' => array(
            'title' => 'Hardware',
            'type' => MENU_LOCAL_TASK,
            'access arguments' => array('administer helpdesk_tickets'),
        ),
        'admin/helpdesk_tickets/hardware/add' => array(
            'title' => 'Add Hardware',
            'type' => MENU_LOCAL_TASK,
            'page callback' => 'drupal_get_form',
            'page arguments' => array('helpdesk_hardware_form'),
            'access arguments' => array('administer helpdesk_tickets'),
        ),
        'admin/helpdesk_tickets/hardware/view' => array(
            'title' => 'Hardware List',
            'type' => MENU_LOCAL_TASK,
            'page callback' => 'helpdesk_hardware_submissions',
            'access arguments' => array('administer helpdesk_tickets'),
        ),
        'admin/helpdesk_tickets/software' => array(
            'title' => 'Software',
            'type' => MENU_LOCAL_TASK,
            'access arguments' => array('administer helpdesk_tickets'),
        ),
        'admin/helpdesk_tickets/software/add' => array(
            'title' => 'Add Software',
            'type' => MENU_LOCAL_TASK,
            'page callback' => 'drupal_get_form',
            'page arguments' => array('helpdesk_software_form'),
            'access arguments' => array('administer helpdesk_tickets'),
        ),
        'admin/helpdesk_tickets/software/view' => array(
            'title' => 'Software List',
            'type' => MENU_LOCAL_TASK,
            'page callback' => 'helpdesk_software_submissions',
            'access arguments' => array('administer helpdesk_tickets'),
        ),
        'admin/helpdesk_tickets/problem_type' => array(
            'title' => 'Problem Type',
            'type' => MENU_LOCAL_TASK,
            'access arguments' => array('administer helpdesk_tickets'),
        ),
        'admin/helpdesk_tickets/problem_type/add' => array(
            'title' => 'Add Problem Type',
            'type' => MENU_LOCAL_TASK,
            'page callback' => 'drupal_get_form',
            'page arguments' => array('helpdesk_problem_type_form'),
            'access arguments' => array('administer helpdesk_tickets'),
        ),
        'admin/helpdesk_tickets/problem_type/view' => array(
            'title' => 'Problem Type List',
            'type' => MENU_LOCAL_TASK,
            'page callback' => 'helpdesk_problem_type_submissions',
            'access arguments' => array('administer helpdesk_tickets'),
        ),
        
    );
    return $items;
}

/**
*  Administration form for Helpdesk Clients
*/
function helpdesk_client_form($form, &$form_state){
    /**$form['helpdesk_tickets_client_id'] = array(
        '#type' => 'textfield', 
        '#title' => t('Client ID'), 
        '#default_value' => variable_get('client_id', ''), 
        '#size' => 60, 
        '#maxlength' => 128, 
        '#required' => TRUE,
    );*/
    $form['helpdesk_tickets_client_name'] = array(
        '#type' => 'textfield', 
        '#title' => t('Client Name'), 
        '#default_value' => variable_get('client_name', ''), 
        '#size' => 60, 
        '#maxlength' => 128,  
        '#required' => TRUE,
    );
    
    $form['helpdesk_tickets_client_ext_no'] = array(
        '#type' => 'textfield', 
        '#title' => t("Client's Extension Number"), 
        '#default_value' => variable_get('client_ext_no', ''), 
        '#size' => 60, 
        '#maxlength' => 128,  
        '#required' => TRUE,
    );
    
    $form['helpdesk_tickets_client_dept'] = array(
        '#type' => 'textfield', 
        '#title' => t('Client Department'), 
        '#default_value' => variable_get('client_dept', ''), 
        '#size' => 60, 
        '#maxlength' => 128,  
        '#required' => TRUE,
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Add Client'),
    );
    return $form;
}

function helpdesk_client_form_validate($form, &$form_state) {
    return TRUE;
}

function helpdesk_client_form_submit($form, &$form_state){
    $cid = db_insert('helpdesk_caller')
        ->fields(array(
            'name' => $form_state['values']['helpdesk_tickets_client_name'],
            'ext_no' => $form_state['values']['helpdesk_tickets_client_ext_no'],
            'dept' => $form_state['values']['helpdesk_tickets_client_dept'],
        ))
        ->execute();

    drupal_set_message(t('Your form entry has been added.'));
}

function helpdesk_client_submissions(){
    $results = db_query("SELECT * FROM {helpdesk_caller}");
    
    $header = array(t('Name'), t('Extension No'), t('Department'));
    $rows = array();
    
    foreach($results AS $result){
        $rows[] = array(
            $result->name,
            $result->ext_no,
            $result->dept,
        );
    }
    
    return theme('table', array('header' => $header, 'rows' => $rows));
}

/**
 * Implementation of hook_permission().
 * Define user permissions.
*/
function helpdesk_tickets_permission() {
    return array(
        'administer helpdesk_tickets' => array(
            'title' => t('Administer Helpdesk Tickets'),
            'description' => t('Perform administration tasks for Helpdesk Tickets.'),
        ),
    );
}

/**
*  Administration form for Helpdesk Hardware
*/
function helpdesk_hardware_form($form, &$form_state){
    /**$form['helpdesk_tickets_client_id'] = array(
        '#type' => 'textfield', 
        '#title' => t('Client ID'), 
        '#default_value' => variable_get('client_id', ''), 
        '#size' => 60, 
        '#maxlength' => 128, 
        '#required' => TRUE,
    );*/
    $form['helpdesk_tickets_hardware_name'] = array(
        '#type' => 'textfield', 
        '#title' => t('Hardware Name'), 
        '#default_value' => variable_get('hardware_name', ''), 
        '#size' => 60, 
        '#maxlength' => 128,  
        '#required' => TRUE,
    );
    $form['helpdesk_tickets_hardware_serial_no'] = array(
        '#type' => 'textfield', 
        '#title' => t("Hardware's Serial Number"), 
        '#default_value' => variable_get('hardware_serial_no', ''), 
        '#size' => 60, 
        '#maxlength' => 128,  
        '#required' => TRUE,
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Add Hardware'),
    );
    return $form;
}

function helpdesk_hardware_form_validate($form, &$form_state) {
    return TRUE;
}

function helpdesk_hardware_form_submit($form, &$form_state){
    $cid = db_insert('helpdesk_hardware')
        ->fields(array(
            'name' => $form_state['values']['helpdesk_tickets_hardware_name'],
            'serial_no' => $form_state['values']['helpdesk_tickets_hardware_serial_no'],
        ))
        ->execute();

    drupal_set_message(t('Your form entry has been added.'));
}

function helpdesk_hardware_submissions(){
    $results = db_query("SELECT * FROM {helpdesk_hardware}");
    
    $header = array(t('Name'), t('Serial No'));
    $rows = array();
    
    foreach($results AS $result){
        $rows[] = array(
            $result->name,
            $result->serial_no,
        );
    }
    
    return theme('table', array('header' => $header, 'rows' => $rows));
}

/**
*  Administration form for Helpdesk Clients
*/
function helpdesk_software_form($form, &$form_state){
    /**$form['helpdesk_tickets_client_id'] = array(
        '#type' => 'textfield', 
        '#title' => t('Client ID'), 
        '#default_value' => variable_get('client_id', ''), 
        '#size' => 60, 
        '#maxlength' => 128, 
        '#required' => TRUE,
    );*/
    $form['helpdesk_tickets_software_name'] = array(
        '#type' => 'textfield', 
        '#title' => t('Software Name'), 
        '#default_value' => variable_get('software_name', ''), 
        '#size' => 60, 
        '#maxlength' => 128,  
        '#required' => TRUE,
    );
    $form['helpdesk_tickets_software_serial_no'] = array(
        '#type' => 'textfield', 
        '#title' => t("Software's Serial Number"), 
        '#default_value' => variable_get('software_serial_no', ''), 
        '#size' => 60, 
        '#maxlength' => 128,  
        '#required' => TRUE,
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Add Software'),
    );
    return $form;
}

function helpdesk_software_form_validate($form, &$form_state) {
    return TRUE;
}

function helpdesk_software_form_submit($form, &$form_state){
    $cid = db_insert('helpdesk_software')
        ->fields(array(
            'name' => $form_state['values']['helpdesk_tickets_software_name'],
            'serial_no' => $form_state['values']['helpdesk_tickets_software_serial_no'],
        ))
        ->execute();

    drupal_set_message(t('Your form entry has been added.'));
}

function helpdesk_software_submissions(){
    $results = db_query("SELECT * FROM {helpdesk_software}");
    
    $header = array(t('Name'), t('Serial No'));
    $rows = array();
    
    foreach($results AS $result){
        $rows[] = array(
            $result->name,
            $result->serial_no,
        );
    }
    
    return theme('table', array('header' => $header, 'rows' => $rows));
}

function helpdesk_problem_type_form($form, &$form_state){
    /**$form['helpdesk_tickets_client_id'] = array(
        '#type' => 'textfield', 
        '#title' => t('Client ID'), 
        '#default_value' => variable_get('client_id', ''), 
        '#size' => 60, 
        '#maxlength' => 128, 
        '#required' => TRUE,
    );*/
    $form['helpdesk_tickets_problem_type_name'] = array(
        '#type' => 'textfield', 
        '#title' => t('Problem Type'), 
        '#default_value' => variable_get('software_name', ''), 
        '#size' => 60, 
        '#maxlength' => 128,  
        '#required' => TRUE,
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Add Problem Type'),
    );
    return $form;
}

function helpdesk_problem_type_form_validate($form, &$form_state) {
    return TRUE;
}

function helpdesk_problem_type_form_submit($form, &$form_state){
    $cid = db_insert('helpdesk_problem_type')
        ->fields(array(
            'problem' => $form_state['values']['helpdesk_tickets_problem_type_name'],
        ))
        ->execute();

    drupal_set_message(t('Your form entry has been added.'));
}

function helpdesk_problem_type_submissions(){
    $results = db_query("SELECT * FROM {helpdesk_problem_type}");
    
    $header = array(t('Problem Type'));
    $rows = array();
    
    foreach($results AS $result){
        $rows[] = array(
            $result->problem,
        );
    }
    
    return theme('table', array('header' => $header, 'rows' => $rows));
}


/**
 * Defines how the ticket list page will look like.
 */
function helpdesk_tickets_list_page() {
    $header = array(
        array('data' => t('Issue'), 'field' => 'title'),
        array('data' => t('Caller'), 'field' => 'caller'),
        array('data' => t('Type of problem'), 'field' => 'problem'),
        array('data' => t('Priority'), 'field' => 'priority'),
        array('data' => t('State'), 'field' => 'state'),
        array('data' => t('Date'), 'field' => 'date', 'sort' => 'desc'),
        array('data' => t('Created by'), 'field' => 'creator')
    );

    $query = db_select('helpdesk_ticket', 't')
        ->extend('PagerDefault')
        ->extend('TableSort')
        ->limit(20);
    
    $query->join('node', 'n', 't.nid = n.nid');
    $query->join('users', 'u', 'n.uid = u.uid');
    $query->join('helpdesk_priority', 'p', 't.priority = p.pid');
    $query->join('helpdesk_state', 's', 't.state = s.sid');
    $query->join('helpdesk_caller', 'c', 't.cid = c.cid');
    $query->join('helpdesk_problem_type', 'pt', 't.problem = pt.pid');

    $query->addField('n', 'title', 'title');
    $query->addField('n', 'created', 'date');
    $query->addField('u', 'name', 'creator');
    $query->addField('p', 'priority', 'priority');
    $query->addField('s', 'state', 'state');
    $query->addField('c', 'name', 'caller');
    $query->addField('pt', 'problem', 'problem');

    $query->orderByHeader($header);

    $result = $query->execute();

    $rows = array();

    foreach ($result as $record) {
        $rows[] = array($record->title, $record->caller, $record->problem, $record->priority, $record->state, format_date($record->date, 'short'), $record->creator);
    }

    $output = 'No tickets have been added yet.';

    if (count($rows) > 0)
    {
        $output = theme('table', array('header' => $header, 'rows' => $rows));
    }

    return $output;
}

/**
 * Helper function to get a single record by a particular attribute.
 */
function _get_record_by_attribute($table, $field, $value, $return_fields) {
    $result = db_select($table, 't')
        ->fields('t', $return_fields)
        ->condition($field, $value, '=')
        ->execute();

    return $result->fetchField();
}

/**
 * Helper function to get the title of a helpdesk ticket given its node id.
 */
function _get_ticket_title($nid) {
    return _get_record_by_attribute('node', 'nid', $nid, array('title'));
}

/**
 * Helper function to get the name of a priority given its unique id.
 */
function _get_priority_name($pid) {
    return _get_record_by_attribute('helpdesk_priority', 'pid', $pid, array('priority'));
}

/**
 * Helper function to get the name of a state given its unique id.
 */
function _get_state_name($sid) {
    return _get_record_by_attribute('helpdesk_state', 'sid', $sid, array('state'));
}

/**
 * Helper function to get the name of a caller given their unique id.
 */
function _get_caller_name($cid) {
    return _get_record_by_attribute('helpdesk_caller', 'cid', $cid, array('name'));
}

/**
 * Helper function to get the name of a problem type given its unique id.
 */
function _get_problem_type_name($pid) {
    return _get_record_by_attribute('helpdesk_problem_type', 'pid', $pid, array('problem'));
}

/**
 * Helper function to get the name of a user given their unique id.
 */
function _get_user_name($uid) {
    return _get_record_by_attribute('users', 'uid', $uid, array('name'));
}

/**
 * Helper function to get the list of all priorities mapped with unique id and name.
 */
function _get_full_priority_list() {
    $priorities = array();

    $result = db_select('helpdesk_priority', 'p')
        ->fields('p', array('pid', 'priority'))
        ->execute();

    foreach ($result as $priority) {
        $priorities[$priority->pid] = $priority->priority;
    }

    return $priorities;
}

/**
 * Helper function to get the list of all states mapped with unique id and name.
 */
function _get_full_state_list() {
    $states = array();

    $result = db_select('helpdesk_state', 's')
        ->fields('s', array('sid', 'state'))
        ->execute();

    foreach ($result as $state) {
        $states[$state->sid] = $state->state;
    }

    return $states;
}

/**
 * Helper function to get the list of all callers mapped with unique id and name.
 */
function _get_full_caller_list() {
    $callers = array();

    $result = db_select('helpdesk_caller', 'c')
        ->fields('c', array('cid', 'name'))
        ->execute();

    foreach ($result as $caller) {
        $callers[$caller->cid] = $caller->name;
    }

    return $callers;
}

/**
 * Helper function to get the list of all problem types mapped with unique id and name.
 */
function _get_full_problem_type_list() {
    $problem_types = array();

    $result = db_select('helpdesk_problem_type', 'p')
        ->fields('p', array('pid', 'problem'))
        ->execute();

    foreach ($result as $problem_type) {
        $problem_types[$problem_type->pid] = $problem_type->problem;
    }

    return $problem_types;
}

/**
 * Helper function to get the list of all specialists mapped with unique id and user name.
 */
function _get_full_specialists_list() {
    $specialists = array();
    $role = user_role_load_by_name('specialist');

    $query = db_select('users', 'u');

    $query->join('users_roles', 'ur', 'u.uid = ur.uid');

    $result = $query->fields('u', array('uid', 'name'))
        ->condition('ur.rid', $role->rid, '=')
        ->execute();

    foreach ($result as $specialist) {
        $specialists[$specialist->uid] = $specialist->name;
    }

    return $specialists;
}
