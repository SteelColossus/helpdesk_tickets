<?php
/**
 * @file
 * helpdesk_tickets.module
 */

/**
 * Implementation of hook_node_info().
 * Define module-provided node types.
 */
function helpdesk_tickets_node_info() {
    return array(
        'helpdesk_ticket' => array(
            'name' => t('Helpdesk ticket'),
            'base' => 'helpdesk_ticket',
            'description' => t('A <em>helpdesk ticket</em>.')
        )
    );
}

/**
 * Implementation of hook_load().
 * Act on nodes being loaded from the database.
 * Node-type specific.
 */
function helpdesk_ticket_load($nodes) {
    $result = db_query('SELECT nid, priority, state FROM {helpdesk_ticket} WHERE nid IN(:nids)', array(':nids' => array_keys($nodes)));
    
    foreach ($result as $record) {
        $nodes[$record->nid]->priority = $record->priority;
        $nodes[$record->nid]->state = $record->state;
    }
}

/**
 * Implementation of hook_form().
 * Display a node editing form.
 * Node-type specific.
 */
function helpdesk_ticket_form($node, &$form_state) {
    // Get the default implementation of hook_form()
    $form = node_content_form($node, $form_state);

    $priorities = _get_full_priority_list();

    $form['priority'] = array(
        '#type' => 'select',
        '#title' => t('Priority'),
        '#options' => $priorities,
        '#description' => t('Select how urgent this issue is.'),
        '#default_value' => isset($node->priority) ? $node->priority : 2
    );

    $states = _get_full_state_list();

    $form['state'] = array(
        '#type' => 'select',
        '#title' => t('State'),
        '#options' => $states,
        '#description' => t('Select what state this issue is in.'),
        '#default_value' => isset($node->state) ? $node->state : 1
    );

    return $form;
}

/**
 * Implementation of hook_view().
 * Display a node.
 * Node-type specific.
 */
function helpdesk_ticket_view($node, $view_node, $langcode = NULL) {
    $priority_text = t(ucwords(_get_priority_name($node->priority)));

    $node->content['priority'] = array(
        '#type' => 'item',
        '#title' => t('Priority'),
        '#markup' => $priority_text
    );

    $state_text = t(ucwords(_get_state_name($node->state)));

    $node->content['state'] = array(
        '#type' => 'item',
        '#title' => t('State'),
        '#markup' => $state_text
    );

    return $node;
}

/**
 * Implementation of hook_insert().
 * Respond to creation of a new node.
 * Node-type specific.
 */
function helpdesk_ticket_insert($node) {
    _helpdesk_ticket_merge($node);
}

/**
 * Implementation of hook_update().
 * Respond to updates to a node.
 * Node-type specific.
 */
function helpdesk_ticket_update($node) {
    _helpdesk_ticket_merge($node);
}

/**
 * Helper function for inserting or updating a node.
 */
function _helpdesk_ticket_merge($node) {
    // Add or update the ticket
    db_merge('helpdesk_ticket')
        ->key(array('nid' => $node->nid))
        ->fields(array(
            'nid' => $node->nid,
            'priority' => $node->priority,
            'state' => $node->state
        ))
        ->execute();
}

/**
 * Implementation of hook_delete().
 * Respond to node deletion.
 * Node-type specific.
 */
function helpdesk_ticket_delete($node) {
    db_delete('helpdesk_ticket')
        ->condition('nid', $node->nid)
        ->execute();
}

/**
 * Implementation of hook_menu().
 * Define menu items and page callbacks.
 */
function helpdesk_tickets_menu() {
    $items = array(
        'ticket_list' => array(
            'title' => 'Helpdesk Ticket Overview',
            'type' => MENU_NORMAL_ITEM,
            'page callback' => 'helpdesk_tickets_list_page',
            'access callback' => TRUE
        )
    );
    
    return $items;
}

/**
 * Defines how the ticket list page will look like.
 */
function helpdesk_tickets_list_page() {
    $result = db_query('SELECT nid, priority, state FROM {helpdesk_ticket}');

    $rows = array();

    foreach ($result as $record) {
        $rows[] = array($record->nid, $record->priority, $record->state);
    }
   
    $output = theme('table', array('header' => 'Tickets', 'rows' => $result->fetch));

    return $output;
}

/**
 * Helper function to get the name of a priority given its unique id.
 */
function _get_priority_name($pid) {
    $result = db_query('SELECT priority FROM {helpdesk_priority} WHERE pid = :pid', array(':pid' => $pid));
    return $result->fetchField();
}

/**
 * Helper function to get the name of a state given its unique id.
 */
function _get_state_name($sid) {
    $result = db_query('SELECT state FROM {helpdesk_state} WHERE sid = :sid', array(':sid' => $sid));
    return $result->fetchField();
}

/**
 * Helper function to get the list of all priorities mapped with unique id and name.
 */
function _get_full_priority_list() {
    $priorities = array();

    $result = db_select('helpdesk_priority', 'p')
        ->fields('p', array('pid', 'priority'))
        ->execute();

    foreach ($result as $priority) {
        $priorities[$priority->pid] = $priority->priority;
    }

    return $priorities;
}

/**
 * Helper function to get the list of all states mapped with unique id and name.
 */
function _get_full_state_list() {
    $states = array();

    $result = db_select('helpdesk_state', 's')
        ->fields('s', array('sid', 'state'))
        ->execute();

    foreach ($result as $state) {
        $states[$state->sid] = $state->state;
    }

    return $states;
}
