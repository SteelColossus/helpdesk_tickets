<?php
/**
 * @file
 * helpdesk_tickets.module
 */

/**
 * Implementation of hook_node_info().
 * Define module-provided node types.
 */
function helpdesk_tickets_node_info() {
    return array(
        'helpdesk_ticket' => array(
            'name' => t('Helpdesk ticket'),
            'base' => 'helpdesk_ticket',
            'description' => t('A <em>helpdesk ticket</em>.')
        )
    );
}

/**
 * Implementation of hook_load().
 * Act on nodes being loaded from the database.
 * Node-type specific.
 */
function helpdesk_ticket_load($nodes) {
    $result = db_query('SELECT nid, priority, state, cid FROM {helpdesk_ticket} WHERE nid IN(:nids)', array(':nids' => array_keys($nodes)));

    foreach ($result as $record) {
        $nodes[$record->nid]->priority = $record->priority;
        $nodes[$record->nid]->state = $record->state;
        $nodes[$record->nid]->cid = $record->cid;
    }
}

/**
 * Implementation of hook_form().
 * Display a node editing form.
 * Node-type specific.
 */
function helpdesk_ticket_form($node, &$form_state) {
    // Get the default implementation of hook_form()
    $form = node_content_form($node, $form_state);

    $priorities = _get_full_priority_list();

    $form['priority'] = array(
        '#type' => 'select',
        '#title' => t('Priority'),
        '#options' => $priorities,
        '#description' => t('Select how urgent this issue is.'),
        '#required' => TRUE,
        '#default_value' => isset($node->priority) ? $node->priority : 2
    );

    $states = _get_full_state_list();

    $form['state'] = array(
        '#type' => 'select',
        '#title' => t('State'),
        '#options' => $states,
        '#description' => t('Select what state this issue is in.'),
        '#required' => TRUE,
        '#default_value' => isset($node->state) ? $node->state : 1
    );

    $callers = _get_full_caller_list();

    $form['caller'] = array(
        '#type' => 'select',
        '#title' => t('Caller'),
        '#options' => $callers,
        '#description' => t('Select the name of the person who called in with this issue.'),
        '#required' => TRUE
    );

    if (isset($node->cid))
    {
        $form['caller']['#default_value'] = $node->cid;
    }

    return $form;
}

/**
 * Implementation of hook_view().
 * Display a node.
 * Node-type specific.
 */
function helpdesk_ticket_view($node, $view_node, $langcode = NULL) {
    $priority_text = t(ucwords(_get_priority_name($node->priority)));

    $node->content['priority'] = array(
        '#type' => 'item',
        '#title' => t('Priority'),
        '#markup' => $priority_text
    );

    $state_text = t(ucwords(_get_state_name($node->state)));

    $node->content['state'] = array(
        '#type' => 'item',
        '#title' => t('State'),
        '#markup' => $state_text
    );
    
    $caller_text = t(_get_caller_name($node->caller));

    $node->content['caller'] = array(
        '#type' => 'item',
        '#title' => t('Caller'),
        '#markup' => $caller_text
    );

    return $node;
}

/**
 * Implementation of hook_insert().
 * Respond to creation of a new node.
 * Node-type specific.
 */
function helpdesk_ticket_insert($node) {
    _helpdesk_ticket_merge($node);
}

/**
 * Implementation of hook_update().
 * Respond to updates to a node.
 * Node-type specific.
 */
function helpdesk_ticket_update($node) {
    _helpdesk_ticket_merge($node);
}

/**
 * Helper function for inserting or updating a node.
 */
function _helpdesk_ticket_merge($node) {
    // Add or update the ticket
    db_merge('helpdesk_ticket')
        ->key(array('nid' => $node->nid))
        ->fields(array(
            'nid' => $node->nid,
            'priority' => $node->priority,
            'state' => $node->state,
            'cid' => $node->caller
        ))
        ->execute();
}

/**
 * Implementation of hook_delete().
 * Respond to node deletion.
 * Node-type specific.
 */
function helpdesk_ticket_delete($node) {
    db_delete('helpdesk_ticket')
        ->condition('nid', $node->nid)
        ->execute();
}

/**
 * Implementation of hook_menu().
 * Define menu items and page callbacks.
 */
function helpdesk_tickets_menu() {
    $items = array(
        'ticket_list' => array(
            'title' => 'Helpdesk Tickets Overview',
            'type' => MENU_NORMAL_ITEM,
            'page callback' => 'helpdesk_tickets_list_page',
            'access callback' => TRUE
        ),
        'admin/helpdesk_tickets' => array(
            'title' => 'Helpdesk Ticketing System',
            'description' => 'Configure the helpdesk ticketing system.',
            'position' => 'right',
            'weight' => 5,
            'page callback' => 'helpdesk_tickets_admin_menu_block_page',
            'access arguments' => array('administer helpdesk_tickets'),
            'file' => 'helpdesk_tickets.admin.inc',
        ),
        'admin/helpdesk_tickets/tab1' => array(
            'title' => 'Helpdesk Client Settings',
            'type' => MENU_DEFAULT_LOCAL_TASK,
            'description' => 'Configure the helpdesk ticketing system.',
            'position' => 'right',
            'weight' => 5,
            'page callback' => 'helpdesk_tickets_admin_menu_block_page',
            'access arguments' => array('administer helpdesk_tickets'),
            'file' => 'helpdesk_tickets.admin.inc',
        ),
        'admin/helpdesk_tickets/tab2' => array(
            'title' => 'Add Helpdesk Clients',
            'type' => MENU_LOCAL_TASK,
            'page callback' => 'drupal_get_form',
            'page arguments' => array('helpdesk_client_form'),
            'access arguments' => array('administer helpdesk_tickets'),
        ),
        'admin/helpdesk_tickets/tab3' => array(
            'title' => 'Helpdesk Client List',
            'type' => MENU_LOCAL_TASK,
            'page callback' => 'helpdesk_client_submissions',
            'access arguments' => array('administer helpdesk_tickets'),
        ),
    );
    return $items;
}

/**
*  Administration form for Helpdesk Clients
*/
function helpdesk_client_form($form, &$form_state){
    /**$form['helpdesk_tickets_client_id'] = array(
        '#type' => 'textfield', 
        '#title' => t('Client ID'), 
        '#default_value' => variable_get('client_id', ''), 
        '#size' => 60, 
        '#maxlength' => 128, 
        '#required' => TRUE,
    );*/
    $form['helpdesk_tickets_client_name'] = array(
        '#type' => 'textfield', 
        '#title' => t('Client Name'), 
        '#default_value' => variable_get('client_name', ''), 
        '#size' => 60, 
        '#maxlength' => 128,  
        '#required' => TRUE,
    );
    $form['helpdesk_tickets_client_ext_no'] = array(
        '#type' => 'textfield', 
        '#title' => t("Client's Extension Number"), 
        '#default_value' => variable_get('client_ext_no', ''), 
        '#size' => 60, 
        '#maxlength' => 128,  
        '#required' => TRUE,
    );
    $form['helpdesk_tickets_client_dept'] = array(
        '#type' => 'textfield', 
        '#title' => t('Client Department'), 
        '#default_value' => variable_get('client_dept', ''), 
        '#size' => 60, 
        '#maxlength' => 128,  
        '#required' => TRUE,
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Add Client'),
    );
    return $form;
}

function helpdesk_client_form_validate($form, &$form_state) {
    return TRUE;
}

function helpdesk_client_form_submit($form, &$form_state){
    $cid = db_insert('helpdesk_caller')
        ->fields(array(
            'name' => $form_state['values']['helpdesk_tickets_client_name'],
            'ext_no' => $form_state['values']['helpdesk_tickets_client_ext_no'],
            'dept' => $form_state['values']['helpdesk_tickets_client_dept'],
        ))
        ->execute();

    drupal_set_message(t('Your form entry has been added.'));
}

function helpdesk_client_submissions(){
    $results = db_query("SELECT * FROM {helpdesk_caller}");
    
    $header = array(t('Name'), t('Extension No'), t('Department'));
    $rows = array();
    
    foreach($results AS $result){
        $rows[] = array(
            $result->name,
            $result->ext_no,
            $result->dept,
        );
    }
    
    return theme('table', array('header' => $header, 'rows' => $rows));
}

/**
 * Implementation of hook_permission().
 * Define user permissions.
*/
function helpdesk_tickets_permission() {
    return array(
        'administer helpdesk_tickets' => array(
            'title' => t('Administer Helpdesk Tickets'),
            'description' => t('Perform administration tasks for Helpdesk Tickets.'),
        ),
    );
}

/**
 * Defines how the ticket list page will look like.
 */
function helpdesk_tickets_list_page() {
    $result = db_query('SELECT n.title, n.created, u.name, p.priority, s.state
                        FROM {helpdesk_ticket} AS t
                        INNER JOIN {node} AS n
                        ON t.nid = n.nid
                        INNER JOIN {users} AS u
                        ON n.uid = u.uid
                        INNER JOIN {helpdesk_priority} AS p
                        ON t.priority = p.pid
                        INNER JOIN {helpdesk_state} AS s
                        ON t.state = s.sid');

    $rows = array();
    $header = array('Issue', 'Priority', 'State', 'Date', 'Created by');

    foreach ($result as $record) {
        $rows[] = array($record->title, $record->priority, $record->state, format_date($record->created, 'short'), $record->name);
    }

    $output = theme('table', array('header' => $header, 'rows' => $rows));

    return $output;
}

/**
 * Helper function to get the title of a helpdesk ticket given its node id.
 */
function _get_ticket_title($nid) {
    $result = db_query('SELECT title FROM {node} WHERE nid = :nid', array(':nid' => $nid));
    return $result->fetchField();
}

/**
 * Helper function to get the name of a priority given its unique id.
 */
function _get_priority_name($pid) {
    $result = db_query('SELECT priority FROM {helpdesk_priority} WHERE pid = :pid', array(':pid' => $pid));
    return $result->fetchField();
}

/**
 * Helper function to get the name of a state given its unique id.
 */
function _get_state_name($sid) {
    $result = db_query('SELECT state FROM {helpdesk_state} WHERE sid = :sid', array(':sid' => $sid));
    return $result->fetchField();
}

/**
 * Helper function to get the name of a caller given their unique id.
 */
function _get_caller_name($cid) {
    $result = db_query('SELECT name FROM {helpdesk_caller} WHERE cid = :cid', array(':cid' => $cid));
    return $result->fetchField();
}

/**
 * Helper function to get the list of all priorities mapped with unique id and name.
 */
function _get_full_priority_list() {
    $priorities = array();

    $result = db_select('helpdesk_priority', 'p')
        ->fields('p', array('pid', 'priority'))
        ->execute();

    foreach ($result as $priority) {
        $priorities[$priority->pid] = $priority->priority;
    }

    return $priorities;
}

/**
 * Helper function to get the list of all states mapped with unique id and name.
 */
function _get_full_state_list() {
    $states = array();

    $result = db_select('helpdesk_state', 's')
        ->fields('s', array('sid', 'state'))
        ->execute();

    foreach ($result as $state) {
        $states[$state->sid] = $state->state;
    }

    return $states;
}

/**
 * Helper function to get the list of all callers mapped with unique id and name.
 */
function _get_full_caller_list() {
    $callers = array();

    $result = db_select('helpdesk_caller', 'c')
        ->fields('c', array('cid', 'name'))
        ->execute();

    foreach ($result as $caller) {
        $callers[$caller->cid] = $caller->name;
    }

    return $callers;
}
